generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Settings {
  id                Int           @db.Int @id @default(autoincrement())
  userId            Int           @db.Int @unique
  theme             String        @db.VarChar(255) @default("light")
  themePrism        String        @db.VarChar(255) @default("prism")
  themeBackground   String        @db.VarChar(255) @default("slanted-gradient")
  language          String        @db.VarChar(255) @default("en")
  buttons           String        @db.VarChar(255) @default("left")
  monospace         Boolean       @db.TinyInt @default(true)
  createdAt         DateTime      @db.DateTime(6) @default(now())
  updatedAt         DateTime      @db.DateTime(6) @default(now())
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id          Int      @db.Int @id @default(autoincrement())
  userId      Int      @db.Int
  ua          String   @db.VarChar(255)
  fingerprint String   @db.VarChar(255)
  refresh     String   @db.VarChar(255) @default(uuid())
  expires     String   @db.VarChar(255)
  ip          String   @db.VarChar(255)
  createdAt   DateTime @db.DateTime(6) @default(now())
  updatedAt   DateTime @db.DateTime(6) @default(now())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([fingerprint, userId])
  @@index([userId])
}

model User {
  id            Int        @db.Int @id @default(autoincrement())
  googleId      String?    @db.VarChar(255)
  facebookId    String?    @db.VarChar(255)
  name          String     @db.VarChar(255) @unique
  description   String     @db.VarChar(255) @default("No description")
  avatar        String?    @db.VarChar(255)
  email         String     @db.VarChar(255) @unique
  password      String?    @db.VarChar(255)
  createdAt     DateTime   @db.DateTime(6) @default(now())
  updatedAt     DateTime   @db.DateTime(6) @default(now())
  deletedAt     DateTime?  @db.DateTime(6)
  githubId      String?    @db.VarChar(255)
  categories    Category[]
  posts         Post[]
  sessions      Session[]
  settings      Settings?
}

model Category {
  id            Int       @db.Int @id @default(autoincrement())
  userId        Int       @db.Int
  name          String    @db.VarChar(255)
  description   String    @db.VarChar(255)
  createdAt     DateTime  @db.DateTime(6) @default(now())
  updatedAt     DateTime  @db.DateTime(6) @default(now())
  deletedAt     DateTime? @db.DateTime(6)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  posts         Post[]

  @@unique([name, userId])
  @@index([userId])
}

model Post {
  id            Int       @db.Int @id @default(autoincrement())
  name          String    @db.VarChar(255)
  description   String    @db.VarChar(255)
  markdown      String    @db.Text
  image         String?   @db.VarChar(255)
  userId        Int       @db.Int
  categoryId    Int       @db.Int
  createdAt     DateTime  @db.DateTime(6) @default(now())
  updatedAt     DateTime  @db.DateTime(6) @default(now())
  deletedAt     DateTime? @db.DateTime(6)
  category      Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [userId], references: [id])

  @@unique([name, userId, categoryId])
  @@index([categoryId])
  @@index([userId])
}
